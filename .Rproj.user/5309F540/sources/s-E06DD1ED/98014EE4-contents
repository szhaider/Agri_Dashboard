
library(shiny)
library(dplyr)
library(shinyscreenshot)
library(glue)
library(leaflet)
 library(sf)
library(shinythemes)
library(shinycssloaders)
library(htmltools)
library(htmlwidgets)
library(bslib)
library(RColorBrewer)



data <- readRDS("data/data.RDS")

pak_shp <- readRDS("data/pak_shp.RDS")

ui <- navbarPage("Crop Output",
                 
                 tabPanel("INTERACTIVE MAPS",
                          bootstrapPage(theme = shinytheme("flatly")),
                          
                          tags$style(type = 'text/css', '#map {height: calc(100vh - 80px) !important;}', style= 'padding-top:0px;'),
                          leafletOutput("map") %>% 
                            withSpinner(),
                          br(),
                          tags$head(tags$style("#source{color:black; font-size:12px; font-style:italic; max-height: 110px; background: yellow; }")),
                          verbatimTextOutput("source"),
                          
                          absolutePanel(id = "controls", class = "panel panel-default", fixed= TRUE,
                                        draggable = TRUE, bottom = "auto", right = "auto", left = 70, top = 80,
                                        width = 230, height = "auto", 
                                        style = "background-color: white;
                                                   opacity: 0.85;
                                                   padding: 20px 20px 20px 20px;
                                                   margin: auto;
                                                   border-radius: 5pt;
                                                   box-shadow: 0pt 0pt 6pt 0px rgba(61,59,61,0.48);
                                                   padding-bottom: 2mm;
                                                   padding-top: 1mm;",
                                        selectInput("year",
                                                    "Choose Year",
                                                    choices = unique(data$year),
                                                    selected = 2019),
                                        
                                        selectInput("crop", 
                                                    "Choose Crop",
                                                    choices = unique(data$crop),
                                                    selected = "Wheat",
                                                    width = "200px",
                                                    selectize = T),
                                        
                                        
                                        h6(tags$b(tags$em("Use this button to download the data underlying the current on-screen map"))),
                                        downloadButton("mapdata", "Get Data", class= "btn-sm"),
                                        actionButton("screenshot", "Screenshot",class="btn-sm"),
                                        
                                        br()
                          )
                 )
)
                 

server <- function(input, output, session){

d1  <- reactive({
  data %>% 
    filter(input$year == year,
           input$crop == crop)
})
  
  
# map <- reactive({
  
  #Labelling for the Map       
  labels <- reactive({
    paste0(glue::glue("<b>District</b>: { pak_shp$district } </br>"), glue::glue("<b> { d1()$crop } (000 tonnes): </b>"), " ", glue::glue("{ round(d1()$production, 2) }"), sep = "") %>% 
      lapply(htmltools::HTML)                                                                             
  })
  
  
  pal <- reactive({
      colorBin(palette = c('#FFEDA0', '#FED976', '#FEB24C', '#FD8D3C', '#FC4E2A','#E31A1C'), bins= 6, na.color = "grey",  domain= d1()$production, pretty = T)
  })

  # st_transform(pak_shp, "+proj=longlat +ellps=WGS84 +datum=WGS84") %>%   #pak_shp, crs = "+init=epsg:4326" 
output$map <- renderLeaflet({
      leaflet(pak_shp, options = leafletOptions(zoomSnap = 0.20, 
                                     zoomDelta = 0.20)) %>% 
    addProviderTiles(providers$Esri, group = "ESRI") %>% 
    addProviderTiles(providers$OpenStreetMap , group = "OpenStreetMap") %>% 
    addProviderTiles(providers$Stamen.Terrain,
                     options = tileOptions(minZoom = 0,
                                           maxZoom = 13),
                     group = "ST Terrain") %>%
    addProviderTiles(providers$Stamen.TonerLite, group = "Toner Lite") %>%
    addProviderTiles(providers$Esri.WorldImagery , group = "ESRI IMG") %>% 
    addProviderTiles(providers$NASAGIBS.ViirsEarthAtNight2012 , group = "NASA Nightlights") %>% 
    
    setView(lng=69, lat = 31, zoom = 5.4) %>% 
    addPolygons(label= labels(),
                labelOptions = labelOptions(
                  style = list("font-weight"= "normal",   
                               padding= "3px 8px",
                               "color"= "#cc4c02"), 
                  textsize= "15px",
                  direction = "auto"
                ),
                fillColor =  ~pal()(d1()$production),
                fillOpacity = 1,
                stroke = TRUE,
                color= "white",
                weight = 1,
                opacity = 0.7,
                fill = TRUE,
                dashArray = NULL,
                smoothFactor = 0.5,
                highlightOptions = highlightOptions(weight= 5,
                                                    fillOpacity = 1,
                                                    opacity= 1,
                                                    bringToFront = TRUE), 
                group = "Polygons") %>%
    
    addLayersControl(baseGroups = c("ESRI", "OpenStreetMap", "ST Terrain", "Toner Lite","ESRI IMG", "NASA Nightlights"),
                     overlayGroups = c("Polygons"),
                     options = layersControlOptions(collapsed = TRUE)) %>% 
    
    addMeasure() %>% 
    addScaleBar("bottomright") %>%
    addLegend("bottomright",
              pal= pal(),
              values= ~d1()$production,
              title = "000 Tonnes",
              opacity= 1)
})

observeEvent(input$screenshot,{
  screenshot(filename = glue("{ input$screenshot }", " ", "screenshot"), selector = "#map", scale = 0.80, timer = 1)
  
})


#Download data underlying the shown map
output$mapdata <- downloadHandler(
  filename = function(){
    paste(glue("{ input$crop }"), "_", glue("{ input$year }"), ".csv")
  },
  content = function(file){
    write.csv(d1(), file) 
  }
)

output$source <- renderText("Source: CEM Data (forthcoming)")

}

shinyApp(ui, server)